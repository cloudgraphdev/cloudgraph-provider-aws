type awsElastiCacheCluster implements awsBaseService @key(fields: "arn") {
  cacheClusterId: String @search(by: [hash, regexp])
  configurationEndpoint: awsElastiCacheEndpoint
  clientDownloadLandingPage: String @search(by: [hash, regexp])
  cacheNodeType: String @search(by: [hash, regexp])
  engine: String @search(by: [hash, regexp])
  engineVersion: String @search(by: [hash, regexp])
  cacheClusterStatus: String @search(by: [hash, regexp])
  numCacheNodes: Int @search
  preferredAvailabilityZone: String @search(by: [hash, regexp])
  preferredOutpostArn: String @search(by: [hash, regexp])
  cacheClusterCreateTime: String @search(by: [hash, regexp])
  preferredMaintenanceWindow: String @search(by: [hash, regexp])
  pendingModifiedValues: awsElastiCachePendingModifiedValues
  notificationConfiguration: awsElastiCacheNotificationConfiguration
  cacheSecurityGroups: [awsElastiCacheSecurityGroupMembership]
  cacheParameterGroup: awsElastiCacheParameterGroupStatus
  cacheNodes: [awsElastiCacheNode]
  autoMinorVersionUpgrade: Boolean @search
  replicationGroupId: String @search(by: [hash, regexp])
  snapshotRetentionLimit: Int @search
  snapshotWindow: String @search(by: [hash, regexp])
  authTokenEnabled: Boolean @search
  authTokenLastModifiedDate: String @search(by: [hash, regexp])
  transitEncryptionEnabled: Boolean @search
  atRestEncryptionEnabled: Boolean @search
  replicationGroupLogDeliveryEnabled: Boolean @search
  logDeliveryConfigurations: [awsElastiCacheLogDeliveryConfiguration]
  tags: [awsRawTag]
  cacheSubnetGroup: awsCacheSubnetGroup
  securityGroups: [awsSecurityGroup] @hasInverse(field: elastiCacheCluster)
  subnets: [awsSubnet] @hasInverse(field: elastiCacheCluster)
  vpc: [awsVpc] @hasInverse(field: elastiCacheCluster)
}

type awsElastiCacheEndpoint
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  address: String @search(by: [hash, regexp])
  port: Int @search
}

type awsElastiCachePendingModifiedValues
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  numCacheNodes: Int @search
  cacheNodeIdsToRemove: [String] @search(by: [hash])
  engineVersion: String @search(by: [hash, regexp])
  cacheNodeType: String @search(by: [hash, regexp])
  authTokenStatus: String @search(by: [hash, regexp])
  logDeliveryConfigs: [awsElastiCachePendingLogDeliveryConfig]
}

type awsElastiCacheNotificationConfiguration
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  topicArn: String @search(by: [hash, regexp])
  topicStatus: String @search(by: [hash, regexp])
}

type awsElastiCacheSecurityGroupMembership
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  securityGroupId: String @search(by: [hash])
  status: String @search(by: [hash, regexp])
}

type awsElastiCacheParameterGroupStatus
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  cacheParameterGroupName: String @search(by: [hash, regexp])
  parameterApplyStatus: String @search(by: [hash, regexp])
  cacheNodeIdsToReboot: [String] @search(by: [hash])
}

type awsElastiCacheNode
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  cacheNodeId: String @search(by: [hash, regexp])
  cacheNodeStatus: String @search(by: [hash, regexp])
  cacheNodeCreateTime: String @search(by: [hash, regexp])
  endpoint: awsElastiCacheEndpoint
  parameterGroupStatus: String @search(by: [hash, regexp])
  sourceCacheNodeId: String @search(by: [hash, regexp])
  customerAvailabilityZone: String @search(by: [hash, regexp])
  customerOutpostArn: String @search(by: [hash, regexp])
}

type awsCacheSubnetGroup
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  cacheSubnetGroupName: String @search(by: [hash, regexp])
  cacheSubnetGroupDescription: String @search(by: [hash, regexp])
  vpcId: String @search(by: [hash])
}
