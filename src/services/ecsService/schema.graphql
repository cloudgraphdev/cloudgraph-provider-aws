type awsEcsService implements awsBaseService @key(fields: "arn") {
  serviceName: String @search(by: [hash, regexp])
  loadBalancers: [awsEcsLoadBalancer]
  serviceRegistries: [awsEcsServiceRegistry]
  status: String @search(by: [hash, regexp])
  desiredCount: Int @search
  runningCount: Int @search
  pendingCount: Int @search
  launchType: String @search(by: [hash, regexp])
  capacityProviderStrategy: [awsEcsCapacityProviderStrategyItem]
  platformVersion: String @search(by: [hash, regexp])
  deploymentConfiguration: awsEcsDeploymentConfiguration
  deployments: [awsEcsDeployment]
  roleArn: String @search(by: [hash, regexp])
  events: [awsEcsServiceEvent]
  createdAt: String @search(by: [hash, regexp])
  placementConstraints: [awsEcsPlacementConstraint]
  placementStrategy: [awsEcsPlacementStrategy]
  networkConfiguration: awsEcsNetworkConfiguration
  healthCheckGracePeriodSeconds: Int @search
  schedulingStrategy: String @search(by: [hash, regexp])
  deploymentController: awsEcsDeploymentController
  createdBy: String @search(by: [hash, regexp])
  enableECSManagedTags: Boolean @search
  propagateTags: String @search(by: [hash, regexp])
  enableExecuteCommand: Boolean @search
  clusterArn: String @search(by: [hash, regexp])
  clusterName: String @search(by: [hash, regexp])
  tags: [awsRawTag]
  ecsCluster: [awsEcsCluster] @hasInverse(field: ecsService)
  ecsTaskDefinition: [awsEcsTaskDefinition] @hasInverse(field: ecsService)
  ecsTaskSet: [awsEcsTaskSet] @hasInverse(field: ecsService)
  elb: [awsElb] @hasInverse(field: ecsService)
  iamRoles: [awsIamRole] @hasInverse(field: ecsServices)
  securityGroups: [awsSecurityGroup] @hasInverse(field: ecsService)
  subnet: [awsSubnet] @hasInverse(field: ecsService) #change to plural
  vpc: [awsVpc] @hasInverse(field: ecsServices)
}

type awsEcsDeployment
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  status: String @search(by: [hash, regexp])
  taskDefinition: String @search(by: [hash, regexp])
  desiredCount: Int @search
  pendingCount: Int @search
  runningCount: Int @search
  failedTasks: Int @search
  createdAt: String @search(by: [hash, regexp])
  updatedAt: String @search(by: [hash, regexp])
  capacityProviderStrategy: [awsEcsCapacityProviderStrategyItem]
  launchType: String @search(by: [hash, regexp])
  platformVersion: String @search(by: [hash, regexp])
  networkConfiguration: awsEcsNetworkConfiguration
  rolloutState: String @search(by: [hash, regexp])
  rolloutStateReason: String @search(by: [hash, regexp])
}

type awsEcsScale
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  value: Int @search
  unit: String @search(by: [hash, regexp])
}

type awsEcsServiceEvent
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  createdAt: String @search(by: [hash, regexp])
  message: String @search(by: [hash, regexp])
}

type awsEcsPlacementConstraint
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  type: String @search(by: [hash, regexp])
  expression: String @search(by: [hash, regexp])
}

type awsEcsPlacementStrategy
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  type: String @search(by: [hash, regexp])
  field: String @search(by: [hash, regexp])
}

type awsEcsAwsVpcConfiguration
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  subnets: [String] @search(by: [hash])
  securityGroups: [String] @search(by: [hash])
  assignPublicIp: String @search(by: [hash, regexp])
}

type awsEcsNetworkConfiguration
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  awsvpcConfiguration: awsEcsAwsVpcConfiguration
}

type awsEcsDeploymentController
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  type: String @search(by: [hash, regexp])
}

type awsEcsDeploymentConfiguration
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  deploymentCircuitBreaker: awsEcsDeploymentCircuitBreaker
  maximumPercent: Int @search
  minimumHealthyPercent: Int @search
}

type awsEcsDeploymentCircuitBreaker
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  enable: Boolean @search
  rollback: Boolean @search
}

type awsEcsLoadBalancer
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  targetGroupArn: String @search(by: [hash, regexp])
  loadBalancerName: String @search(by: [hash, regexp])
  containerName: String @search(by: [hash, regexp])
  containerPort: Int @search
}

type awsEcsServiceRegistry
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  registryArn: String @search(by: [hash, regexp])
  port: Int @search
  containerName: String @search(by: [hash, regexp])
  containerPort: Int @search
}
